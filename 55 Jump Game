class Solution {
public:
    bool canJump(vector<int>& nums) {
        //from beginning of the vector, call farest,  return end
    		while(end<(nums.size()-1)){
    			temp=end;
    			end=farest(nums,oldend,end);
    			
    			if (end==oldend) return false;
    			oldend=temp;
    		}

    		return true;
        	//check end < size-1 if not recall it
    		//also check two index not the same
    }

    int farest(vector<int>& nums,int left, int right){
    	std::vector<int> vec(nums.begin()+left,nums.begin()+right+1);
		for(auto p=vec.begin();p!=vec.end();p++){
			*p=*p+left;
			left++;
		}
		return *max_element(vec.begin(),vec.end());
    }



private:

	int end=0;
	int oldend=0,temp;

};
